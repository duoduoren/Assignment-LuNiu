public class Main {

public static void main(String[] args) {
    Main main = new Main();
    
    // Question 1
    int[] nums = new int[]{9, 4, 8, 7, 5, 1, 3};
    int[] res = main.reverseEvenIndices(nums);
    for(int i = 0; i < res.length; i++) {
        System.out.print(res[i] + ",");
    }

    System.out.println();

    // Question 2
    System.out.println(main.arrangeCoins(3));

    // Question 3
    nums = new int[]{1,2,3};
    System.out.println(main.minMoves(nums));

    // Question 4
    System.out.println(main.countNumberOfPossibleWays(6, 3, 18));

    // Question 5
    for (Cell cell: main.findPath(new int[][] {{1, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 0, 0}, {1, 1, 1, 1}})) {
        System.out.print(cell);
    }
}

//Question 1.
public int[] reverseEvenIndices(int[] nums) { // score 6
    if (nums == null) {
        return null;
    }

    int n = nums.length;
    if (n <= 2) {
        return nums;
    }

    int l = 0;
    int r = n % 2 != 0 ? n - 1 : n -2;

    while (l < r) {
        int temp = nums[l];
        nums[l] = nums[r];
        nums[r] = temp;
        l += 2;
        r -= 2;
    }

    return nums;
}

//Question 2.
public int arrangeCoins(int n){ //score 7
    int cur = 1, rem = n - 1;
    while (rem >= cur + 1) {
        ++cur;
        rem -= cur;
    }

    return n == 0 ? 0 : cur;
}

//Question 3.
public int minMoves(int[] nums){ //score 7
    if (nums.length == 0) return 0;
    int min = nums[0];
    for (int n : nums) min = Math.min(min, n);
    int res = 0;
    for (int n : nums) res += n - min;

    return res;
}

//Question 4.
public int countNumberOfPossibleWays(int m, int n, int x){ // score 10
    int[][] table = new int [n + 1][ x + 1];
    for (int j = 1; j <= m && j <= x; j++) {
        table[1][j] = 1;
    }

    for (int i = 2; i <= n; i++)
        for (int j = 1; j <= x; j++)
            for (int k = 1; k <= m && k < j; k++) {
                table[i][j] += table[i - 1][j - k];
            }

    return table[n][x];
}

//Question 5.
class Cell{
    int x,y;
    Cell(int x, int y){
        this.x = x;
        this.y = y;
    }
    public String toString(){
        return "["+this.x +", "+this.y+ "]";
    }
}
/*
        for input = { {1,1,0,1,0},
                      {1,1,1,1,1},
                      {1,0,0,1,0},
                      {1,1,0,1,1}};
               expected output = [[0, 0], [1, 0], [1, 1], [1, 2], [1, 3], [2, 3], [3, 3], [3, 4]]
               your output = [[0, 0], [1, 0], [1, 1], [1, 2], [1, 3], [2, 3], [3, 3], [0, 1], 
                             [1, 1], [1, 2], [1, 3], [2, 3], [3, 3]]
                     however we asked for N*N, your code works fine for N*N
 */

public ArrayList<Cell> findPath(int[][] maze){ // extra credit 10
    ArrayList<Cell> path = new ArrayList<Cell>();
    this.findPath(maze, 0, 0, maze.length, path);

    return path;
}

private boolean findPath(int[][] maze, int x, int y, int N, ArrayList<Cell> path) {
    if ((x == N && y == N - 1) || (x == N - 1 && y == N) ) {
        return true;
    }

    if (x == N || y == N ) {
        return false;
    }

    if (maze[x][y] == 1) {
        Cell stop = new Cell(x, y);
        path.add(stop);
        boolean canGoForward = findPath(maze, x + 1, y, N, path);
        boolean canGoDown = findPath(maze, x, y + 1, N, path);
        if (canGoForward || canGoDown) {
            return true;
        }

        path.remove(stop);
    }

    return false;
}
}
